/**
 * @namespace qtoggle.api.constants
 */

import {gettext}        from '$qui/base/i18n.js'
import * as StringUtils from '$qui/utils/string.js'


/**
 * Common URL prefix used for all API endpoints.
 * @alias qtoggle.api.constants.QTOGGLE_API_PREFIX
 * @type {String}
 */
export const QTOGGLE_API_PREFIX = '/api'

/**
 * Known API errors.
 * @alias qtoggle.api.constants.KNOWN_ERRORS
 * @type {Array<Object>}
 */
export const KNOWN_ERRORS = [
    /* HTTP 400 */
    {
        status: 400,
        pattern: new RegExp('^malformed request$'),
        pretty: StringUtils.formatPercent(
            gettext('Communication protocol error (%(error)s).'),
            {error: 'malformed request'}
        )
    },
    {
        status: 400,
        pattern: new RegExp('^malformed body'),
        pretty: StringUtils.formatPercent(
            gettext('Communication protocol error (%(error)s).'),
            {error: 'malformed body'}
        )
    },
    {
        status: 400,
        pattern: new RegExp('^missing field: (\\w+)$'),
        pretty: StringUtils.formatPercent(
            gettext('Communication protocol error (%(error)s).'),
            {error: 'missing field "$1"'}
        ),
        paramNames: ['field']
    },
    {
        status: 400,
        pattern: new RegExp('^invalid request$'),
        pretty: StringUtils.formatPercent(
            gettext('Communication protocol error (%(error)s).'),
            {error: 'invalid request'}
        )
    },
    {
        status: 400,
        pattern: new RegExp('^attribute not modifiable: (\\w+)$'),
        pretty: StringUtils.formatPercent(gettext('Attribute "%(attr)s" is not modifiable.'), {attr: '$1'}),
        paramNames: ['attribute']
    },
    {
        status: 400,
        pattern: new RegExp('^no such attribute: (\\w+)$'),
        pretty: StringUtils.formatPercent(gettext('No such attribute "%(attr)s".'), {attr: '$1'}),
        paramNames: ['attribute']
    },
    {
        status: 400,
        pattern: new RegExp('^invalid field: (\\w+)$'),
        pretty: StringUtils.formatPercent(gettext('Invalid value for "%(field)s".'), {field: '$1'}),
        paramNames: ['field']
    },
    {
        status: 400,
        pattern: new RegExp('^invalid value$'),
        pretty: gettext('Invalid port value.')
    },
    {
        status: 400,
        pattern: new RegExp('^no such version$'),
        pretty: gettext('Firmware version not available.')
    },
    {
        status: 400,
        pattern: new RegExp('^duplicate port$'),
        pretty: gettext('The port already exists.')
    },
    {
        status: 400,
        pattern: new RegExp('^too many ports$'),
        pretty: gettext('The maximum number of ports has been reached.')
    },
    {
        status: 400,
        pattern: new RegExp('^port not removable$'),
        pretty: gettext('Ports that are not virtual cannot be removed.')
    },
    {
        status: 400,
        pattern: new RegExp('^port disabled$'),
        pretty: gettext('Requested operation needs the port to be enabled.')
    },
    {
        status: 400,
        pattern: new RegExp('^read-only port$'),
        pretty: gettext('Requested operation needs the port to be writable.')
    },
    {
        status: 400, /* Generated by slave devices */
        pattern: new RegExp('^forbidden$'),
        pretty: gettext('The supplied credentials are incorrect.')
    },
    {
        status: 400,
        pattern: new RegExp('^duplicate device$'),
        pretty: gettext('The device has already been added to master.')
    },
    {
        status: 400,
        pattern: new RegExp('^no listen support$'),
        pretty: gettext('The device does not support listening.')
    },
    {
        status: 400,
        pattern: new RegExp('^listening and polling$'),
        pretty: gettext('Listening and polling cannot be both enabled.')
    },

    /* HTTP 401 */
    {
        status: 401,
        pattern: new RegExp('^authentication required$'),
        pretty: gettext('Credentials are required.')
    },

    /* HTTP 403 */
    {
        status: 403,
        pattern: new RegExp('^forbidden$'),
        pretty: gettext('The supplied credentials are incorrect.')
    },

    /* HTTP 404 */
    {
        status: 404,
        pattern: new RegExp('^no such port$'),
        pretty: gettext('Requested port does not exist.')
    },
    {
        status: 404,
        pattern: new RegExp('^no such function$'),
        pretty: gettext("Device doesn't expose the qToggle API at given URL.")
    },
    {
        status: 404,
        pattern: new RegExp('^no such device$'),
        pretty: gettext('Requested device does not exist.')
    },
    {
        status: 404,
        pattern: new RegExp('^device disabled$'),
        pretty: gettext('Requested device is disabled.')
    },

    /* HTTP 502 */
    {
        status: 502,
        pattern: new RegExp('^port error: (\\w+)$'),
        pretty: StringUtils.formatPercent(gettext('Port communication error: %(error)s.'), {error: '$1'})
    },
    {
        status: 502,
        pattern: new RegExp('^invalid device$'),
        pretty: gettext('The device is not a qToggle device.')
    },
    {
        status: 502,
        pattern: new RegExp('^connection refused$'),
        pretty: gettext('Device refuses the connection.')
    },
    {
        status: 502,
        pattern: new RegExp('^unreachable$'),
        pretty: gettext('Device is unreachable.')
    },

    /* HTTP 503 */
    {
        status: 503,
        pattern: new RegExp('^busy$'),
        pretty: gettext('Device is busy.')
    },
    {
        status: 503,
        pattern: new RegExp('^device offline$'),
        pretty: gettext('Device is offline.')
    },

    /* HTTP 504 */
    {
        status: 504,
        pattern: new RegExp('^port timeout$'),
        pretty: gettext('Timeout while communicating with the port.')
    },
    {
        status: 504,
        pattern: new RegExp('^device timeout$'),
        pretty: gettext('Timeout waiting for a response from the device.')
    },

    /* Other errors */
    {
        pattern: new RegExp('^timeout$'),
        pretty: gettext('Timeout waiting for a response from the device.')
    },
    {
        pattern: new RegExp('^other error: (.*)$'),
        pretty: StringUtils.formatPercent(gettext('Error communicating with device (%(error)s).'), {error: '$1'})
    }
]

/**
 * Known reasons for an invalid expression error.
 * @alias qtoggle.api.constants.INVALID_EXPRESSION_REASONS
 * @type {Array<Object>}
 */
export const INVALID_EXPRESSION_REASONS = [
    {
        reason: 'unknown-function',
        pretty: 'Unknown function %(token)s.'
    },
    {
        reason: 'invalid-number-of-arguments',
        pretty: 'Invalid number of arguments to function %(token)s.'
    },
    {
        reason: 'unbalanced-parentheses',
        pretty: 'Unbalanced parentheses.'
    },
    {
        reason: 'unexpected-end',
        pretty: 'Expression is unterminated.'
    },
    {
        reason: 'circular-dependency',
        pretty: 'Expression creates a dependency loop.'
    },
    {
        reason: 'external-dependency',
        pretty: 'Expression must not depend on other ports.'
    },
    {
        reason: 'unexpected-character',
        pretty: 'Unexpected character "%(token)s" at position %(pos)d.'
    },
    {
        reason: 'too-long',
        pretty: 'Expression is too long.'
    }
]

/**
 * @alias qtoggle.api.constants.DEBUG_API_CALLS
 * @type {Boolean}
 */
export const DEBUG_API_CALLS = false

/**
 * Server request retry interval, in seconds.
 * @alias qtoggle.api.constants.SERVER_RETRY_INTERVAL
 * @type {Number}
 */
export const SERVER_RETRY_INTERVAL = 3

/**
 * Default server request timeout, in seconds.
 * @alias qtoggle.api.constants.DEFAULT_SERVER_TIMEOUT
 * @type {Number}
 */
export const DEFAULT_SERVER_TIMEOUT = 10

/**
 * Server request timeout for requests that take longer time to process, in seconds.
 * @alias qtoggle.api.constants.LONG_SERVER_TIMEOUT
 * @type {Number}
 */
export const LONG_SERVER_TIMEOUT = 60
