/**
 * @namespace qtoggle.api.constants
 */

import {gettext}        from '$qui/base/i18n.js'
import * as StringUtils from '$qui/utils/string.js'


/**
 * Common URL prefix used for all API endpoints.
 * @alias qtoggle.api.constants.QTOGGLE_API_PREFIX
 * @type {String}
 */
export const QTOGGLE_API_PREFIX = 'api'

/**
 * Known API errors.
 * @alias qtoggle.api.constants.KNOWN_ERRORS
 * @type {Object[]}
 */
export const KNOWN_ERRORS = [
    /* HTTP 400 */
    {
        status: 400,
        code: 'malformed-request',
        pretty: gettext('Communication error (%(error)s).')
    },
    {
        status: 400,
        code: 'malformed-body',
        pretty: gettext('Communication error (%(error)s).')
    },
    {
        status: 400,
        code: 'invalid-request',
        fields: ['details'],
        pretty: gettext('Invalid request: %(details)s.')
    },
    {
        status: 400,
        code: 'invalid-request',
        pretty: gettext('Invalid request.')
    },
    {
        status: 400,
        code: 'missing-field',
        pretty: gettext('Missing field: %(field)s.')
    },
    {
        status: 400,
        code: 'missing-header',
        pretty: gettext('Missing header: %(header)s.')
    },
    {
        status: 400,
        code: 'attribute-not-modifiable',
        pretty: gettext('Attribute "%(attribute)s" is not modifiable.')
    },
    {
        status: 400,
        code: 'no-such-attribute',
        pretty: gettext('No such attribute "%(attribute)s".')
    },
    {
        status: 400,
        code: 'invalid-field',
        pretty: gettext('Invalid value for "%(field)s".')
    },
    {
        status: 400,
        code: 'invalid-header',
        pretty: gettext('Invalid value for "%(header)s".')
    },
    {
        status: 400,
        code: 'invalid-value',
        pretty: gettext('Invalid port value.')
    },
    {
        status: 400,
        code: 'duplicate-port',
        pretty: gettext('The port already exists.')
    },
    {
        status: 400,
        code: 'too-many-ports',
        pretty: gettext('The maximum number of ports has been reached.')
    },
    {
        status: 400,
        code: 'port-not-removable',
        pretty: gettext('Ports that are not virtual cannot be removed.')
    },
    {
        status: 400,
        code: 'port-disabled',
        pretty: gettext('Requested operation needs the port to be enabled.')
    },
    {
        status: 400,
        code: 'read-only-port',
        pretty: gettext('Requested operation needs the port to be writable.')
    },
    {
        status: 400,
        code: 'duplicate-peripheral',
        pretty: gettext('An identical peripheral already exists.')
    },
    {
        status: 400, /* Generated by slave devices */
        code: 'forbidden',
        pretty: gettext('The supplied credentials are incorrect.')
    },
    {
        status: 400,
        code: 'duplicate-device',
        pretty: gettext('The device has already been added to master.')
    },
    {
        status: 400,
        code: 'no-listen-support',
        pretty: gettext('The device does not support listening.')
    },
    {
        status: 400,
        code: 'listening-and-polling',
        pretty: gettext('Listening and polling cannot be both enabled.')
    },

    /* HTTP 401 */
    {
        status: 401,
        code: 'authentication-required',
        pretty: gettext('Credentials are required.')
    },

    /* HTTP 403 */
    {
        status: 403,
        code: 'forbidden',
        pretty: gettext('The supplied credentials are incorrect.')
    },

    /* HTTP 404 */
    {
        status: 404,
        code: 'no-such-port',
        pretty: gettext('Requested port does not exist.')
    },
    {
        status: 404,
        code: 'no-such-function',
        pretty: gettext("Device doesn't expose the qToggle API at given URL.")
    },
    {
        status: 404,
        code: 'no-such-version',
        pretty: gettext('Firmware version not available.')
    },
    {
        status: 404,
        code: 'no-such-device',
        pretty: gettext('Requested device does not exist.')
    },
    {
        status: 404,
        code: 'no-such-driver',
        pretty: gettext('Requested driver does not exist.')
    },
    {
        status: 404,
        code: 'device-disabled',
        pretty: gettext('Requested device is disabled.')
    },

    /* HTTP 502 */
    {
        status: 502,
        code: 'port-error',
        pretty: gettext('Port communication error: %(message)s.')
    },
    {
        status: 502,
        code: 'invalid-device',
        pretty: gettext('The device is not a qToggle device.')
    },
    {
        status: 502,
        code: 'connection-refused',
        pretty: gettext('Device refuses the connection.')
    },
    {
        status: 502,
        code: 'unreachable',
        pretty: gettext('Device is unreachable.')
    },

    /* HTTP 503 */
    {
        status: 503,
        code: 'busy',
        pretty: gettext('Device is busy.')
    },
    {
        status: 503,
        code: 'device-offline',
        pretty: gettext('Device is offline.')
    },

    /* HTTP 504 */
    {
        status: 504,
        code: 'port-timeout',
        pretty: gettext('Timeout while communicating with the port.')
    },
    {
        status: 504,
        code: 'device-timeout',
        pretty: gettext('Timeout waiting for a response from the device.')
    },

    /* Other errors */
    {
        code: 'timeout',
        pretty: gettext('Timeout waiting for a response from the device.')
    },
    {
        code: 'other-error',
        pretty: StringUtils.formatPercent(gettext('Error communicating with device (%(message)s).'))
    }
]

/**
 * Known reasons for an invalid expression error.
 * @alias qtoggle.api.constants.INVALID_EXPRESSION_REASONS
 * @type {Object[]}
 */
export const INVALID_EXPRESSION_REASONS = [
    {
        reason: 'unknown-function',
        pretty: gettext('Unknown function "%(token)s".')
    },
    {
        reason: 'invalid-number-of-arguments',
        pretty: gettext('Invalid number of arguments for function "%(token)s".')
    },
    {
        reason: 'invalid-argument-kind',
        pretty: gettext('Invalid argument %(num)d kind for function "%(token)s" at position %(pos)d.')
    },
    {
        reason: 'unbalanced-parentheses',
        pretty: gettext('Unbalanced parentheses.')
    },
    {
        reason: 'unexpected-end',
        pretty: gettext('Expression is unterminated.')
    },
    {
        reason: 'circular-dependency',
        pretty: gettext('Expression creates a dependency loop.')
    },
    {
        reason: 'external-dependency',
        pretty: gettext('Expression must not depend on other ports.')
    },
    {
        reason: 'unexpected-character',
        pretty: gettext('Unexpected character "%(token)s" at position %(pos)d.')
    },
    {
        reason: 'empty',
        pretty: gettext('Expression is empty.')
    },
    {
        reason: 'too-long',
        pretty: gettext('Expression is too long.')
    }
]

/**
 * @alias qtoggle.api.constants.DEBUG_API_CALLS
 * @type {Boolean}
 */
export const DEBUG_API_CALLS = false

/**
 * Server request retry interval, in seconds.
 * @alias qtoggle.api.constants.SERVER_RETRY_INTERVAL
 * @type {Number}
 */
export const SERVER_RETRY_INTERVAL = 3

/**
 * Default server request timeout, in seconds.
 * @alias qtoggle.api.constants.DEFAULT_SERVER_TIMEOUT
 * @type {Number}
 */
export const DEFAULT_SERVER_TIMEOUT = 10

/**
 * Server request timeout for requests that take longer time to process, in seconds.
 * @alias qtoggle.api.constants.LONG_SERVER_TIMEOUT
 * @type {Number}
 */
export const LONG_SERVER_TIMEOUT = 60
